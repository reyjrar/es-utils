name    = App-ElasticSearch-Utilities
author  = Brad Lhotsky <brad@divisionbyzero.net>
license = BSD
copyright_holder = Brad Lhotsky

[PruneCruft]
[MakeMaker]
[Manifest]

[ExecDir]
dir = scripts

; Documentation
[PodWeaver]
[ContributorsFromGit]
[License]
[InsertCopyright]
[ReadmeMarkdownFromPod]
[ReadmeAnyFromPod / Searching]
filename = Searching.mkdn
source_filename = scripts/es-search.pl
location = root
type = markdown
[ReadmeAnyFromPod / Maintenance]
filename = Maintenance.mkdn
source_filename = scripts/es-daily-index-maintenance.pl
location = root
type = markdown
[ReadmeAnyFromPod / CopyIndexes]
filename = CopyIndexes.mkdn
source_filename = scripts/es-copy-index.pl
location = root
type = markdown
[CopyFilesFromBuild]
copy = README.mkdn
copy = cpanfile
[GitHub::Meta]
repo = es-utils
[MetaJSON]
[MetaYAML]
[MetaConfig]
[MinimumPerl]
[CPANFile]

;Changelog
[ChangelogFromGit]
max_age         = 730
tag_regexp      = ^release-(\d.*)
file_name       = Changes
wrap_column     = 80
copy_to_root    = 0
exclude_message = ^(v\d\.\d|Archive|Merge pull request|Github:)

; Testing
[Test::EOL]
[Test::NoTabs]
[PodCoverageTests]
[PodSyntaxTests]
[Test::Perl::Critic]
[Test::Compile]
fake_home = 1
[RunExtraTests]
[CheckExtraTests]

; Prerequesites
[AutoPrereqs]
[CheckPrereqsIndexed]       ; ensure prereqs are on CPAN
; authordep Pod::Weaver::Section::Contributors
; authordep Pod::Weaver::Section::Support
; authordep Pod::Weaver::Section::Collect::FromOther
; authordep Pod::Elemental::Transformer::List
; authordep Test::Perl::Critic

; Git stuff
[Git::GatherDir]
exclude_filename = README.mkdn
exclude_filename = cpanfile

[Git::NextVersion]  ; get version from last release tag
version_regexp = ^release-(.+)$
[OurPkgVersion]

[Git::Check]        ; ensure all files checked in
allow_dirty = cpanfile
allow_dirty = dist.ini
allow_dirty = README.mkdn
allow_dirty = Maintenance.mkdn
allow_dirty = Searching.mkdn
allow_dirty = CopyIndexes.mkdn
allow_dirty = weaver.ini

; Commit handling / Release?
[ConfirmRelease]
[TestRelease]
[UploadToCPAN]
[Git::Commit / Commit_Dirty_Files]

[Git::Tag]
tag_format = release-%v

[NextRelease]

[Git::Commit / Commit_Changes] ; commit Changes (for new dev)

[Git::Push]         ; push repo to remote
push_to = origin
